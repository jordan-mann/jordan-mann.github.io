////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  //create empty array
  let output = [];
  //test if start equals end
  if (start === end) {
    //return empty array
    return output;
  }
  //test if step is negative
  if (step < 0) {
    //return empty array
    return output;
  }
  //test if step is not given
  if (step === undefined) {
    //loop through range, incrementing by 1
    for (let i = start; i <= end; i++) {
      //push i into output
      output.push(i);
    }
    //else step is given
  }else {
    //loop through array. Increment by step
    for (let i = start; i <= end; i += step) {
      //push i into output
      output.push(i);
    }
  }ssdfsdfsdf
  //return output
  return output;
  
  

}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array, total = 0) {
  if (array.length === 0) {
    return total;
  }

  total += array[0];
  return sum(array.slice(1), total);
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array, newArray = []) {
if (array.length === 0) {
  return newArray;
} 
newArray.unshift(array[0]);
return reverseArray(array.slice(1), newArray);
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
// newArray = [];
// for (let i = 0; i < array.length; i++) {
//   newArray.push(array[i]);
//   array.unshift(newArray[i]);
// }
// return array;

return array.reverse();
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;

  for (let i = array.length - 1; i >= 0; i--) {
    rest = {value: array[i], rest : rest};
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, output = []) {
  //base
  if (list.rest === null) {
    output.push(list.value);
    return output;
  }
  //recursion
  output.push(list.value);
  return listToArray(list.rest, output);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// function prepend(number, list) {
//  //create variable and assign it to an empty object
//   let object = {};
  
//   //use dot notation to give the object a key of 'value' and a value of the input number
//   object.value = number;
//   //use dot notation to give the object a key of 'list' and a value of the input list
//   object.rest = list;
// //return object
//   return object;
// }



function prepend(number, list) {
  let myObject = {};
  myObject.value = number;
  myObject.rest = list;

  return myObject;
}


////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  //test if input number is negative
  if (number < 0) {
    //if true, return no value
    return;
  }
  //test if input number is 0
  if (number === 0) {
    //if true, return current value
    return list.value;
  }
//recursively return the result of the nth function call on the rest value, and number decremented
return nth(list.rest, number - 1);
}



////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  if (typeof x !== 'object' && typeof y !== 'object') {
    return x === y;
  }

  if (typeof x !== 'object' || typeof y !== 'object') {
    return false;
  }

  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y);

  if (xKeys.length !== yKeys.length) {
    return false;
  }

  for (let i = 0; i < xKeys.length; i++) {
    if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])) {
      return false
    }
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
